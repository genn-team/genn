{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lGa0_oLb61zz"
      },
      "source": [
        "# Presenting latency-coded inputs\n",
        "In this first tutorial we build an input layer of spiking \"projection neurons\" for our mushroom body model which converts MNIST digits into latency-coded spikes.\n",
        "\n",
        "## Install PyGeNN wheel from Google Drive\n",
        "Download wheel file"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "if \"google.colab\" in str(get_ipython()):\n",
        "    !gdown 1wUeynMCgEOl2oK2LAd4E0s0iT_OiNOfl\n",
        "    !pip install pygenn-5.1.0-cp311-cp311-linux_x86_64.whl\n",
        "    %env CUDA_PATH=/usr/local/cuda"
      ],
      "metadata": {
        "id": "maq6gt0pgTiQ",
        "outputId": "66ae3f93-665d-4c5c-aad6-7ec357963b3e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading...\n",
            "From: https://drive.google.com/uc?id=1wUeynMCgEOl2oK2LAd4E0s0iT_OiNOfl\n",
            "To: /content/pygenn-5.1.0-cp311-cp311-linux_x86_64.whl\n",
            "\r  0% 0.00/8.49M [00:00<?, ?B/s]\r 80% 6.82M/8.49M [00:00<00:00, 52.1MB/s]\r100% 8.49M/8.49M [00:00<00:00, 57.3MB/s]\n",
            "Processing ./pygenn-5.1.0-cp311-cp311-linux_x86_64.whl\n",
            "Requirement already satisfied: numpy>=1.17 in /usr/local/lib/python3.11/dist-packages (from pygenn==5.1.0) (1.26.4)\n",
            "Requirement already satisfied: psutil in /usr/local/lib/python3.11/dist-packages (from pygenn==5.1.0) (5.9.5)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.11/dist-packages (from pygenn==5.1.0) (75.1.0)\n",
            "pygenn is already installed with the same version as the provided wheel. Use --force-reinstall to force an installation of the wheel.\n",
            "env: CUDA_PATH=/usr/local/cuda\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Install MNIST package"
      ],
      "metadata": {
        "id": "KVRtXVzIg07T"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install mnist"
      ],
      "metadata": {
        "id": "AikBc4sfg1b-",
        "outputId": "6fe5d945-5dc9-475c-cf63-8082bb0162e6",
        "colab": {
          "base_uri": "https://localhost:8080/"
        }
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: mnist in /usr/local/lib/python3.11/dist-packages (0.2.2)\n",
            "Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (from mnist) (1.26.4)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yV0JrchrfQKR"
      },
      "source": [
        "## Build tutorial model\n",
        "Import modules"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "Hl53yKXi9LiV"
      },
      "outputs": [],
      "source": [
        "import mnist\n",
        "import numpy as np\n",
        "from copy import copy\n",
        "from matplotlib import pyplot as plt\n",
        "from pygenn import create_current_source_model, init_postsynaptic, init_weight_update, GeNNModel"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "u67gXzipEue5"
      },
      "source": [
        "Load training images from downloaded file and normalise so each image's pixels add up to one"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "X9JrpOMu9LiZ"
      },
      "outputs": [],
      "source": [
        "mnist.datasets_url = \"https://storage.googleapis.com/cvdf-datasets/mnist/\"\n",
        "training_images = mnist.train_images()\n",
        "training_images = np.reshape(training_images, (training_images.shape[0], -1)).astype(np.float32)\n",
        "\n",
        "training_images /= np.sum(training_images, axis=1)[:, np.newaxis]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mRl2x1HA9Lia"
      },
      "source": [
        "## Visualize training data\n",
        "Reshape first training image from 784 element vector to 28x28 matrix and visualize."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 430
        },
        "id": "N2jR9guR9Lic",
        "outputId": "2bd40751-af7c-4f20-86d1-efcccdee7ccb"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "fig, axis = plt.subplots()\n",
        "axis.imshow(np.reshape(training_images[0], (28, 28)));"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "g0IfyML59Lif"
      },
      "source": [
        "## Parameters\n",
        "Define some model parameters"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "oncGyriW9Lif"
      },
      "outputs": [],
      "source": [
        "# Simulation time step\n",
        "DT = 0.1\n",
        "\n",
        "# Scaling factor for converting normalised image pixels to input currents (nA)\n",
        "INPUT_SCALE = 80.0\n",
        "\n",
        "# Number of Projection Neurons in model (should match image size)\n",
        "NUM_PN = 784\n",
        "\n",
        "# How long to present each image to model\n",
        "PRESENT_TIME_MS = 20.0"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ddx0SZ80Fe9z"
      },
      "source": [
        "Define a standard set of parameters to use for all leaky-integrate and fire neurons"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "id": "---jKi0cFdec"
      },
      "outputs": [],
      "source": [
        "# Standard LIF neurons parameters\n",
        "LIF_PARAMS = {\n",
        "    \"C\": 0.2,\n",
        "    \"TauM\": 20.0,\n",
        "    \"Vrest\": -60.0,\n",
        "    \"Vreset\": -60.0,\n",
        "    \"Vthresh\": -50.0,\n",
        "    \"Ioffset\": 0.0,\n",
        "    \"TauRefrac\": 2.0}"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "lAgVgaYcFq68"
      },
      "source": [
        "Make a copy of this to customise for our Projection neurons and increase the refractory time way above `PRESENT_TIME_MS` so these neurons will only spike once per input."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "id": "9LLcZa-nFjN7"
      },
      "outputs": [],
      "source": [
        "# We only want PNs to spike once\n",
        "PN_PARAMS = copy(LIF_PARAMS)\n",
        "PN_PARAMS[\"TauRefrac\"] = 100.0"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pCYjAoJf9Lig"
      },
      "source": [
        "## Custom models\n",
        "We are going to apply inputs to our model by treating scaled image pixels as neuronal input currents so here we define a simple model to inject the current specified by a state variable. Like all types of custom model in GeNN, the `var_name_types` kwarg is used to specify state variable names and types"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "id": "IR8PXBg69Lih"
      },
      "outputs": [],
      "source": [
        "# Current source model, allowing current to be injected into neuron from variable\n",
        "cs_model = create_current_source_model(\n",
        "    \"cs_model\",\n",
        "    vars=[(\"magnitude\", \"scalar\")],\n",
        "    injection_code=\"injectCurrent(magnitude);\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Gn4DpkPQ9Lii"
      },
      "source": [
        "## Model definition\n",
        "Create a new model called \"mnist_mb_first_layer\" with floating point precision and set the simulation timestep to our chosen value"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "id": "Gx-GsJhD9Lik"
      },
      "outputs": [],
      "source": [
        "# Create model\n",
        "model = GeNNModel(\"float\", \"mnist_mb_first_layer\")\n",
        "model.dt = DT"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AlMTvSBNHYSD"
      },
      "source": [
        "Add a population of `NUM_PN` Projection Neurons, using the built-in LIF model, the parameters we previously chose and initialising the membrane voltage to the reset voltage."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "id": "OnHOIAyVHAFH"
      },
      "outputs": [],
      "source": [
        "# Create neuron populations\n",
        "lif_init = {\"V\": PN_PARAMS[\"Vreset\"], \"RefracTime\": 0.0}\n",
        "pn = model.add_neuron_population(\"pn\", NUM_PN, \"LIF\", PN_PARAMS, lif_init)\n",
        "\n",
        "# Turn on spike recording\n",
        "pn.spike_recording_enabled = True"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sdYo9umiH06S"
      },
      "source": [
        "Add a current source to inject current into `pn` using our newly-defined custom model with the initial magnitude set to zero."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "id": "7e1if0YCG_7m"
      },
      "outputs": [],
      "source": [
        "# Create current sources to deliver input to network\n",
        "pn_input = model.add_current_source(\"pn_input\", cs_model, pn , {}, {\"magnitude\": 0.0})"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-GU4oXOS9Lil"
      },
      "source": [
        "## Build model\n",
        "Generate code and load it into PyGeNN allocating a large enough spike recording buffer to cover `PRESENT_TIME_MS` (after converting from ms to timesteps)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "id": "-FE02Zoz9Lim"
      },
      "outputs": [],
      "source": [
        "# Concert present time into timesteps\n",
        "present_timesteps = int(round(PRESENT_TIME_MS / DT))\n",
        "\n",
        "# Build model and load it\n",
        "model.build()\n",
        "model.load(num_recording_timesteps=present_timesteps)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CcpTaaB39Lim"
      },
      "source": [
        "## Simulate tutorial model\n",
        "In order to ensure that the same stimulus causes exactly the same input each time it is presented, we want to reset the model's state after presenting each stimulus. This function resets neuron state variables selected by the keys of a dictionary to the values specifed in the dictionary values and pushes the new values to the GPU."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "id": "7ENTbLZpGvye"
      },
      "outputs": [],
      "source": [
        "def reset_neuron(pop, var_init):\n",
        "    # Reset variables\n",
        "    for var_name, var_val in var_init.items():\n",
        "        pop.vars[var_name].view[:] = var_val\n",
        "\n",
        "        # Push the new values to GPU\n",
        "        pop.vars[var_name].push_to_device()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hHUa3hbMGwWG"
      },
      "source": [
        "As an initial test of our model, we loop through 4 stimuli and show the Projection Neurons spikes emitted by the model in response."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "I5Qsfgq99Lin",
        "outputId": "c8f5ef07-5e9f-4c3e-ef87-bbda7098a3b2"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAigAAAGwCAYAAACD0J42AAAAOnRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjEwLjAsIGh0dHBzOi8vbWF0cGxvdGxpYi5vcmcvlHJYcgAAAAlwSFlzAAAPYQAAD2EBqD+naQAAMdVJREFUeJzt3Xt8VPWd//H3kBshYSaCJDFcgo1yiQZFcMkYV7MsEmnEuiBWagIqtesYQG4upEvRuhZYSkuLW0L1YYHHL4It+1DLpUi5BV1M5KoiasRoE0xIYKuZQQ1JSM7vDx6ZdYZbJsnknCSv5+NxHpOc853z/XxJyHnP95w5YzMMwxAAAICFdDO7AAAAAH8EFAAAYDkEFAAAYDkEFAAAYDkEFAAAYDkEFAAAYDkEFAAAYDmhZhfQEo2NjaqoqFDPnj1ls9nMLgcAADSDYRg6c+aMEhIS1K3b5edIOmRAqaioUP/+/c0uAwAAtMCJEyfUr1+/y7bpkAGlZ8+eks4P0G63m1wNAABoDo/Ho/79+3uP45cTUEAZOHCgSktLL1j/xBNP6He/+53Onj2ruXPn6pVXXlFtba0yMjK0atUqxcXFeduWlZXJ5XJpz549io6O1tSpU7VkyRKFhja/lKbTOna7nYACAEAH05zLMwK6SPbAgQM6efKkd9mxY4ckadKkSZKk2bNna/Pmzdq4caP27t2riooKTZgwwfv8hoYGZWZmqq6uTm+//bbWrVuntWvXatGiRYGUAQAAOjlbaz4scNasWdqyZYuOHz8uj8ejPn36aP369br//vslSR9//LGGDh2qwsJCpaamatu2bbrnnntUUVHhnVVZvXq15s+fr9OnTys8PLxZ/Xo8HjkcDrndbmZQAADoIAI5frf4bcZ1dXXKz8/Xo48+KpvNpkOHDqm+vl5jxozxthkyZIgGDBigwsJCSVJhYaFSUlJ8TvlkZGTI4/Ho2LFjl+yrtrZWHo/HZwEAAJ1XiwPK66+/rurqaj388MOSpMrKSoWHhysmJsanXVxcnCorK71tvhtOmrY3bbuUJUuWyOFweBfewQMAQOfW4oDy0ksvady4cUpISGjLei4qNzdXbrfbu5w4cSLofQIAAPO06G3GpaWl2rlzp1599VXvuvj4eNXV1am6utpnFqWqqkrx8fHeNvv37/fZV1VVlXfbpURERCgiIqIlpQIAgA6oRTMoa9asUWxsrDIzM73rRowYobCwMO3atcu7rri4WGVlZXI6nZIkp9Opo0eP6tSpU942O3bskN1uV3JyckvHAAAAOpmAZ1AaGxu1Zs0aTZ061efeJQ6HQ9OmTdOcOXPUq1cv2e12zZgxQ06nU6mpqZKksWPHKjk5WdnZ2Vq2bJkqKyu1cOFC5eTkMEMCAAC8Ag4oO3fuVFlZmR599NELtq1YsULdunXTxIkTfW7U1iQkJERbtmyRy+WS0+lUVFSUpk6dqmeffbZ1owAAAJ1Kq+6DYhbugwIAQMfTLvdBAQAACBYCCgAAsBwCCgAAsBwCSgvkF5Uqbelu5Rdd+MnOAACg9QgofpoTPvIKSlReXaO8gpJW7wsAAFyIgOKnOeHDlZ6kvjGRcqUntXpfAADgQgQUP80JH1mpidq3YLSyUhNbvS8AAHAh7oMCAADaBfdBAQAAHRoBBQAAWA4BBQAAWA4BBQAAWA4BBQAAWA4BBQAAWA4BBQAAWA4BBQAAWA4BBQAAWA4BBQAAWA4BBQAAWA4BBQAAWA4BBQAAWA4BxU9+UanSlu5WflFpq9oAAICWI6D4Wb69WOXVNVq+vfiSbfIKSlReXaO8gpJ2rAwAgK6DgNICrvQk9Y2JlCs9yexSANMwkwggmAgofuZlDFbfmEjNyxh8yTZZqYnat2C0slIT27EywFqYSQQQTKFmF2A1WamJBA+gGVzpScorKGEmEUBQ2AzDMMwuIlAej0cOh0Nut1t2u93scgAAQDMEcvzmFA8AALAcAgoAALAcAgoAALAcAgoAALAcAgoAALAcAgoAALAcAgoAALAcAgoAALAcAgoAALAcAgoAALAcAgoAALAcAgoAALAcAoqf/KJSpS3drfyi0la1AQAALUdA8bN8e7HKq2u0fHvxJdvkFZSovLpGeQUl7VgZAABdBwGlBVzpSeobEylXepLZpQCmYSYRQDARUPzMyxisvjGRmpcx+JJtslITtW/BaGWlJrZjZYC1MJMIIJhCzS7AarJSEwkeQDO40pOUV1DCTCKAoLAZhmGYXUSgPB6PHA6H3G637Ha72eUAAIBmCOT4zSkeAABgOQQUAABgOQQUAABgOQQUAABgOQQUAABgOQQUAABgOQQUAABgOQQUAABgOQEHlPLycmVlZal3796KjIxUSkqKDh486N1uGIYWLVqka665RpGRkRozZoyOHz/us48vv/xSDz30kOx2u2JiYjRt2jR9/fXXrR8NAADoFAIKKF999ZXS0tIUFhambdu26cMPP9SvfvUrXXXVVd42y5Yt08qVK7V69Wq98847ioqKUkZGhs6ePett89BDD+nYsWPasWOHtmzZojfffFM/+clP2m5UAACgQwvoVvcLFizQvn379NZbb110u2EYSkhI0Ny5czVv3jxJktvtVlxcnNauXasHH3xQH330kZKTk3XgwAGNHDlSkvTGG2/o+9//vr744gslJCRcsQ5udQ8AQMcTtFvdb9q0SSNHjtSkSZMUGxur4cOH68UXX/Ru//zzz1VZWakxY8Z41zkcDo0aNUqFhYWSpMLCQsXExHjDiSSNGTNG3bp10zvvvHPRfmtra+XxeHwWXF5+UanSlu5WflGp2aUAABCwgALKZ599pry8PF1//fXavn27XC6XZs6cqXXr1kmSKisrJUlxcXE+z4uLi/Nuq6ysVGxsrM/20NBQ9erVy9vG35IlS+RwOLxL//79Ayk7IN89sHfkg3xeQYnKq2uUV1BidikAAAQsNJDGjY2NGjlypBYvXixJGj58uD744AOtXr1aU6dODUqBkpSbm6s5c+Z4v/d4PEELKf4H9u9+3fTR8lmpiUHpuy250pO89QIA0NEENINyzTXXKDk52Wfd0KFDVVZWJkmKj4+XJFVVVfm0qaqq8m6Lj4/XqVOnfLafO3dOX375pbeNv4iICNntdp8lWFzpSeobEylXepLP1x1tRiIrNVH7FozuEGEKgDV05FljdD4BzaCkpaWpuLjYZ90nn3yixMTzB8Frr71W8fHx2rVrl26++WZJ52c73nnnHblcLkmS0+lUdXW1Dh06pBEjRkiSdu/ercbGRo0aNaq142m1rNREn4P6d79mRgJAZ/bdF2K8uIHZAgoos2fP1m233abFixfrgQce0P79+/XCCy/ohRdekCTZbDbNmjVLzz33nK6//npde+21+tnPfqaEhATdd999ks7PuNx999167LHHtHr1atXX12v69Ol68MEHm/UOHrP4BxcA6Gw4NQwrCehtxpK0ZcsW5ebm6vjx47r22ms1Z84cPfbYY97thmHo6aef1gsvvKDq6mrdfvvtWrVqlQYNGuRt8+WXX2r69OnavHmzunXrpokTJ2rlypWKjo5uVg28zRgAgI4nkON3wAHF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\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "for s in range(4):\n",
        "    # Set training image\n",
        "    pn_input.vars[\"magnitude\"].view[:] = training_images[s] * INPUT_SCALE\n",
        "    pn_input.vars[\"magnitude\"].push_to_device()\n",
        "\n",
        "    # Simulate timesteps\n",
        "    for i in range(present_timesteps):\n",
        "        model.step_time()\n",
        "\n",
        "    # Reset neuron state for next stimuli\n",
        "    reset_neuron(pn, lif_init)\n",
        "\n",
        "    # Download spikes from GPU\n",
        "    model.pull_recording_buffers_from_device();\n",
        "\n",
        "    # Plot PN spikes\n",
        "    fig, axis = plt.subplots()\n",
        "    pn_spike_times, pn_spike_ids = pn.spike_recording_data[0]\n",
        "    axis.scatter(pn_spike_times, pn_spike_ids, s=1)\n",
        "    axis.set_xlabel(\"Time [ms]\")"
      ]
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "name": "1_first_layer",
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.7"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}