##--------------------------------------------------------------------------
##   Author: Thomas Nowotny
##
##   Institute: Center for Computational Neuroscience and Robotics
##              University of Sussex
##              Falmer, Brighton BN1 9QJ, UK
##
##   email to:  T.Nowotny@sussex.ac.uk
##
##   initial version: 2010-02-07
##
##--------------------------------------------------------------------------


# Makefile for the GeNN "generateALL.exe" and "genn.lib" binaries
# This is a Windows Makefile, to be used by the MS nmake build system
#--------------------------------------------------------------------

# Source, Include, Object and Library directories
SRC_PATH                 =$(GENN_PATH)\lib\src
INC_PATH                 =$(GENN_PATH)\lib\include
GENERATEALL_PATH         =$(MAKEDIR)
LIBGENN_PATH             =$(GENN_PATH)\lib\lib
!IFNDEF CPU_ONLY
LIBGENN_OBJ_PATH         =$(GENN_PATH)\lib\obj
!ELSE
LIBGENN_OBJ_PATH         =$(GENN_PATH)\lib\obj_CPU_ONLY
!ENDIF

# generateALL.exe and genn.lib targets
!IFNDEF CPU_ONLY
GENERATEALL              =$(GENERATEALL_PATH)\generateALL.exe
LIBGENN                  =$(LIBGENN_PATH)\genn.lib
!ELSE
GENERATEALL              =$(GENERATEALL_PATH)\generateALL_CPU_ONLY.exe
LIBGENN                  =$(LIBGENN_PATH)\genn_CPU_ONLY.lib
!ENDIF
LIBGENN_OBJ              =$(LIBGENN_OBJ_PATH)\global.obj $(LIBGENN_OBJ_PATH)\modelSpec.obj $(LIBGENN_OBJ_PATH)\neuronModels.obj $(LIBGENN_OBJ_PATH)\synapseModels.obj $(LIBGENN_OBJ_PATH)\postSynapseModels.obj $(LIBGENN_OBJ_PATH)\utils.obj $(LIBGENN_OBJ_PATH)\codeGenUtils.obj $(LIBGENN_OBJ_PATH)\sparseUtils.obj $(LIBGENN_OBJ_PATH)\hr_time.obj $(LIBGENN_OBJ_PATH)\newNeuronModels.obj $(LIBGENN_OBJ_PATH)\newWeightUpdateModels.obj $(LIBGENN_OBJ_PATH)\newPostsynapticModels.obj $(LIBGENN_OBJ_PATH)\neuronGroup.obj $(LIBGENN_OBJ_PATH)\synapseGroup.obj  $(LIBGENN_OBJ_PATH)\standardSubstitutions.obj  $(LIBGENN_OBJ_PATH)\standardGeneratedSections.obj

# Global CUDA compiler settings
!IFNDEF CPU_ONLY
NVCC                     ="$(CUDA_PATH)\bin\nvcc.exe"
!ENDIF

# Global C++ compiler settings
!IFNDEF CPU_ONLY
CXXFLAGS                 =/nologo /EHsc /DNVCC=\"$(NVCC:\=/)\"
!ELSE
CXXFLAGS                 =/nologo /EHsc /DCPU_ONLY
!ENDIF
!IFDEF DEBUG
CXXFLAGS                 =$(CXXFLAGS) /debug /Zi /Od /DDEBUG
!ENDIF

# Global include and link flags
!IFNDEF CPU_ONLY
INCLUDE_FLAGS            =/I"$(INC_PATH)" /I"$(CUDA_PATH)\include"
!IF "$(PROCESSOR_ARCHITECTURE)" == "AMD64" || "$(PROCESSOR_ARCHITEW6432)" == "AMD64"
LINK_FLAGS               ="$(LIBGENN_PATH)\genn.lib" "$(CUDA_PATH)\lib\x64\cudart.lib" "$(CUDA_PATH)\lib\x64\cuda.lib"
!ELSE
LINK_FLAGS               ="$(LIBGENN_PATH)\genn.lib" "$(CUDA_PATH)\lib\Win32\cudart.lib" "$(CUDA_PATH)\lib\Win32\cuda.lib"
!ENDIF
!ELSE
INCLUDE_FLAGS            =/I"$(INC_PATH)"
LINK_FLAGS               ="$(LIBGENN_PATH)\genn_CPU_ONLY.lib"
!ENDIF


# Target rules
all: $(GENERATEALL)

$(GENERATEALL): $(LIBGENN) always_compile
	$(CXX) $(CXXFLAGS) /DMODEL=\"$(MODEL)\" /Fe$@ $(SRC_PATH)\generate*.cc $(INCLUDE_FLAGS) $(LINK_FLAGS)

$(LIBGENN): $(LIBGENN_OBJ_PATH) $(LIBGENN_OBJ) $(LIBGENN_PATH)
	lib /nologo /out:$@ $(LIBGENN_OBJ)

{$(SRC_PATH)}.cc{$(LIBGENN_OBJ_PATH)}.obj:
	$(CXX) $(CXXFLAGS) /c /Fo$@ %s $(INCLUDE_FLAGS)

$(LIBGENN_OBJ_PATH):
	mkdir $@ 2>nul

$(LIBGENN_PATH):
	mkdir $@ 2>nul

clean: clean_generateall clean_libgenn

clean_generateall:
	-del $(GENERATEALL) 2>nul

clean_libgenn:
	-rd /s /q $(LIBGENN_OBJ_PATH) $(LIBGENN_PATH) 2>nul

always_compile:
