//----------------------------------------------------------------------------
/*! \page Tutorial1 Tutorial 1

In this tutorial we will go through step by step instructions how to create and run a GeNN simulation starting from scratch. Normally, we recommend users to use one of the example projects as a starting point but it can be very instructive to go through the necessary steps one by one once to appreciate what parts make a GeNN simulation.

\section ModelDefinition The Model Definition

In this tutorial we will use a pre-defined neuron model type (TRAUBMILES) and create a simulation of ten Hodgkin-Huxley neurons \cite Traub1991 without any synaptic connections. We will run this simulation on a GPU and save the results to stdout.

The first step is to write a model definition function in a model definition file. Create a new empty file `tenHHModel.cc` with your favourite editor, e.g.
\code
>> emacs tenHHModel.cc &
\endcode
\note
The ">>" in the example code snippets refers to a shell prompt in a unix shell, do not enter them as part of your shell commands.

The model definition file contains the definition of the network model we want to simulate. First, we need to include the GeNN model specification code `modelSpec.h`. Then the model definition takes the form of a function named `modelDefinition` that takes one argument, passed by reference, of type `NNmodel`. Type in your `tenHHModel.cc` file:
\code
// Model definintion file tenHHModel.cc

#include "modelSpec.h"

void modelDefinition(NNmodel &model)
{
  // definition of tenHHModel
}
\endcode
Now we need to fill the actual model definition. Three standard elements to the `modelDefinition function are initialising GeNN, setting the simulation step size and setting the name of the model:
\code
  initGeNN();
  model.setDT(0.1);
  model.setName("tenHHModel");
\endcode
\note 
With this we have fixed the integration time step to `0.1` in the usual time units. The typical units in GeNN are `ms`, `mV`, `nF`, and `&mu;S`. Therefore, this defines `DT= 0.1 ms`. The name of the model given in the setName method does not need to match the file name of the model definition file. However, we strongly recommend it and if conflicting, the file name of the model definition file will prevail.

Making the actual model definition makes use of the NNmodel::addNeuronPopulation and NNmodel::addSynapsePopulation member functions of the NNmodel object. The arguments to a call to NNmodel::addNeuronPopulation are
\arg `NeuronModel`: template parameter specifying the neuron model class to use
\arg `const std::string &name`: the name of the population
\arg `unsigned int size`: The number of neurons in the population
\arg `const NeuronModel::ParamValues &paramValues`: Parameter values for the neurons in the population
\arg `const NeuronModel::VarValues &varValues`: Initial values for neuron variables

We first create the parameter and initial variable arrays,
\code
  // definition of tenHHModel
  NeuronModels::TraubMiles::ParamValues p(
    7.15,          // 0 - gNa: Na conductance in muS
    50.0,          // 1 - ENa: Na equi potential in mV
    1.43,          // 2 - gK: K conductance in muS
   -95.0,          // 3 - EK: K equi potential in mV 
    0.02672,       // 4 - gl: leak conductance in muS
    -63.563,       // 5 - El: leak equi potential in mV
    0.143          // 6 - Cmem: membr. capacity density in nF
  ); 

  NeuronModels::TraubMiles::VarValues ini(
    -60.0,         // 0 - membrane potential V
    0.0529324,     // 1 - prob. for Na channel activation m
    0.3176767,     // 2 - prob. for not Na channel blocking h
    0.5961207      // 3 - prob. for K channel activation n
  );
\endcode
\note
The comments are obviously only for clarity, they can in principle be omitted. To avoid any confusion about the meaning of parameters and variables, however, we recommend strongly to always include comments of this type.

Having defined the parameter values and initial values we can now create the neuron population,
\code
  model.addNeuronPopulation<NeuronModels::TraubMiles>("Pop1", 10, p, ini);
\endcode

The model definition then needs to end on calling
\code
model.finalize();
\endcode

This completes the model definition in this example. The complete `tenHHModel.cc` file now should look like this:
\code
// Model definintion file tenHHModel.cc

#include "modelSpec.h"

void modelDefinition(NNmodel &model)
{
  // definition of tenHHModel
  initGeNN();
  model.setDT(0.1);
  model.setName("tenHHModel");
  
  NeuronModels::TraubMiles::ParamValues p(
    7.15,          // 0 - gNa: Na conductance in muS
    50.0,          // 1 - ENa: Na equi potential in mV
    1.43,          // 2 - gK: K conductance in muS
   -95.0,          // 3 - EK: K equi potential in mV 
    0.02672,       // 4 - gl: leak conductance in muS
    -63.563,       // 5 - El: leak equi potential in mV
    0.143          // 6 - Cmem: membr. capacity density in nF
  ); 

  NeuronModels::TraubMiles::VarValues ini(
    -60.0,         // 0 - membrane potential V
    0.0529324,     // 1 - prob. for Na channel activation m
    0.3176767,     // 2 - prob. for not Na channel blocking h
    0.5961207      // 3 - prob. for K channel activation n
  );
  model.addNeuronPopulation<NeuronModels::TraubMiles>("Pop1", 10, p, ini);
  model.finalize();
}
\endcode
This model definition suffices to generate code for simulating the ten Hodgkin-Huxley neurons on the a GPU or CPU. The second part of a GeNN simulation is the user code that sets up the simulation, does the data handling for input and output and generally defines the numerical experiment to be run.

\section userCode User Code
For the purposes of this tutorial we will initially simply run the model for one simulated second and record the final neuron variables into a file. GeNN provides the code for simulating the model in a function called `stepTimeCPU()` (execution on CPU only) or `stepTimeGPU()` (execution on a GPU). To make use of this code, we need to define a minimal C/C++ main function. Open a new empty file `tenHHSimulation.cc` in an editor and type
\code
// tenHHModel simulation code
#include "tenHHModel_CODE/definitions.h"

int main()
{
  allocateMem();
  initialize();
  
  return 0;
}
\endcode
This boiler plate code includes the relevant model definition file we completed earlier and the header file of entry point to the generated code `definitions.h` in the subdirectory `tenHHModel_CODE` where GeNN deposits all generated code.

Calling `allocateMem()` allocates the memory structures for all neuron variables and `initialize()` sets the initial values and copies values to the GPU.

Now we can use the generated code to integrate the neuron equations provided by GeNN for 1000ms (\f$ \frac{1000}{DT}\f$ timesteps). To do so, we add after `initialize();`
\code
for(int i = 0; i < (int)(1000.0 / DT); i++) {
  stepTimeGPU();
}
\endcode
and we need to copy the result, and output it to stdout,
\code
  pullPop1StateFromDevice();
  for (int j= 0; j < 10; j++) {  
    cout << VPop1[j] << " ";
    cout << mPop1[j] << " ";
    cout << hPop1[j] << " ";
    cout << nPop1[j] << endl;
  }
\endcode
`pullPop1StateFromDevice()` copies all relevant state variables of the `Pop1` neuron group from the GPU to the CPU main memory. Then we can output the results to stdout by looping through all 10 neurons and outputting the state variables VPop1, mPop1, hPop1, nPop1.
\note
The naming convention for variables in GeNN is the variable name defined by the neuron type, here TraubMiles defining V, m, h, and n, followed by the population name, here `Pop1`.

This completes the user code. The complete `tenHHSimulation.cc` file should now look like 
\code
// tenHHModel simulation code
#include "tenHHModel_CODE/definitions.h"

int main()
{
  allocateMem();
  initialize();
  for(int i = 0; i < (int)(1000.0 / DT); i++) {
    stepTimeGPU();
  }
  pullPop1StateFromDevice();
  for (int j= 0; j < 10; j++) {  
    cout << VPop1[j] << " ";
    cout << mPop1[j] << " ";
    cout << hPop1[j] << " ";
    cout << nPop1[j] << endl;
  }  
  return 0;
}

\endcode

\section Makefile Makefile
A GeNN simulation is built with a simple Makefile. On Unix systems we typically name it `GNUmakefile`. Create this file and enter
\code
EXECUTABLE	:=tenHHSimulation
SOURCES		:=tenHHSimulation.cc

include	$(GENN_PATH)/userproject/include/makefile_common_gnu.mk
\endcode
This defines that the final executable of this simulation is named tenHHSimulation and the simulation code is given in the file `tenHHSimulation.cc` that we completed above.

Now we are ready to compile and run the simulation

\section MakeRun Making and Running the Simulation
To build the model and generate the GeNN code, type in a terminal where you are in the directory containing your `tenHHModel.cc` file,
\code
>> genn-buildmodel.sh tenHHModel.cc
\endcode
If your environment variables `GENN_PATH` and `CUDA_PATH` are correctly configured, you should see some compile output ending in `Model build complete ...`.
Now type
\code
make
\endcode
This should compile your `tenHHSimulation` executable and you can execute it with
\code
./tenHHSimulation
\endcode
The output you obtain should look like
\code
-63.7838 0.0350042 0.336314 0.563243
-63.7838 0.0350042 0.336314 0.563243
-63.7838 0.0350042 0.336314 0.563243
-63.7838 0.0350042 0.336314 0.563243
-63.7838 0.0350042 0.336314 0.563243
-63.7838 0.0350042 0.336314 0.563243
-63.7838 0.0350042 0.336314 0.563243
-63.7838 0.0350042 0.336314 0.563243
-63.7838 0.0350042 0.336314 0.563243
-63.7838 0.0350042 0.336314 0.563243
\endcode

\section Input Reading 
This is not particularly interesting as we are just observing the final value of the membrane potentials. To see what is going on in the meantime, we need to copy intermediate values from the device and save them into a file.
This can be done in many ways but one sensible way of doing this is to replace the calls to `stepTimeGPU` in `tenHHSimulation.cc` with something like this:
\code
ofstream os("tenHH_output.V.dat");
for (int i= 0; i < 10000; i++) {
  stepTimeGPU();
  
  pullPop1StateFromDevice();
  os << t << " ";
  for (int j= 0; j < 10; j++) {
    os << VPop1[j] << " ";
  }
  os << endl;
}
os.close();
\endcode
\note 
t is a global variable updated by the GeNN code to keep track of elapsed simulation time in ms.

You will also need to add:
\code
#include<fstream>
\endcode
to the top of tenHHSimulation.cc.
After building, making and executing,
\code
genn-builmodel.sh tenHHModel.cc
make clean all
./tenHHSimulation
\endcode
there should be a file `tenHH_output.V.dat` in the same directory. If you plot column one (time) against the subsequent 10 columns (voltage of the 10 neurons), you should observe dynamics like this:
\image html tenHHexample.png
\image latex tenHHexample.png width=10cm

However so far, the neurons are not connected and do not receive input. As the NeuronModels::TraubMiles model is silent in such conditions, the membrane voltages of the 10 neurons will simply drift from the -60mV they were initialised at to their resting potential.

\link sectSynapseModels Previous\endlink | \link Tutorial1 Top\endlink | \link Tutorial2 Next\endlink

*/
